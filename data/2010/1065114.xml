<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CSR: Medium: Collaborative Research: Programming parallel in-memory data-center applications with Piccolo</AwardTitle>
    <AwardEffectiveDate>07/01/2011</AwardEffectiveDate>
    <AwardExpirationDate>06/30/2015</AwardExpirationDate>
    <AwardAmount>330171</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05050000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division Of Computer and Network Systems</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>M. Mimi McClure</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>There is a rising demand to scale application performance by distributing &lt;br/&gt;computation across many machines in a data-center. It is difficult to write &lt;br/&gt;efficient and robust parallel programs in the data-center setting because &lt;br/&gt;programmers need to worry about reducing communication overhead while handling &lt;br/&gt;possible machine failures. &lt;br/&gt;&lt;br/&gt;This project investigates a new data-centric parallel programming &lt;br/&gt;model, called Piccolo, that can simplify the construction of in-memory &lt;br/&gt;data-center applications such as PageRank, neural network training etc. &lt;br/&gt;&lt;br/&gt;In-memory applications can hold all their intermediate states in the aggregate &lt;br/&gt;memory of many machines and benefit from sharing these intermediate states &lt;br/&gt;between machines during computation. Traditionally, these applications &lt;br/&gt;have been built using low-level communication-centric primitives such as MPI, &lt;br/&gt;resulting in significant programming complexity. The recently popular &lt;br/&gt;MapReduce and Dryad also do not fit well with these applications &lt;br/&gt;because their data flow programming model lacks support for shared states. &lt;br/&gt;&lt;br/&gt;Unlike data flow models, Piccolo explicitly supports the sharing of mutable, &lt;br/&gt;distributed states via a key/value table interface. Piccolo makes sharing &lt;br/&gt;efficient by optimizing for locality of access to shared tables and &lt;br/&gt;automatically resolving write-write conflicts using user-defined accumulation &lt;br/&gt;functions. As a result, Piccolo is easy to program for, enables applications &lt;br/&gt;that do not fit into MapReduce, and achieves good scalable performance.</AbstractNarration>
    <MinAmdLetterDate>06/14/2011</MinAmdLetterDate>
    <MaxAmdLetterDate>07/05/2013</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1065114</AwardID>
    <Investigator>
      <FirstName>M. Frans</FirstName>
      <LastName>Kaashoek</LastName>
      <EmailAddress>kaashoek@lcs.mit.edu</EmailAddress>
      <StartDate>06/14/2011</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Massachusetts Institute of Technology</Name>
      <CityName>Cambridge</CityName>
      <ZipCode>021394301</ZipCode>
      <PhoneNumber>6172531000</PhoneNumber>
      <StreetAddress>77 MASSACHUSETTS AVE</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Massachusetts</StateName>
      <StateCode>MA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7354</Code>
      <Text>COMPUTER SYSTEMS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>7354</Code>
      <Text>COMPUTER SYSTEMS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7924</Code>
      <Text>MEDIUM PROJECT</Text>
    </ProgramReference>
  </Award>
</rootTag>
