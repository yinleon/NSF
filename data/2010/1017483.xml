<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: CSR: Small: Bounded Verification and Bounded Synthesis</AwardTitle>
    <AwardEffectiveDate>09/01/2010</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2014</AwardExpirationDate>
    <AwardAmount>450000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>A common feature of many modern human-engineered systems, such as medical devices, automobiles and aerospace vehicles, is that they involve interaction between discrete software systems and continuous physical systems. Several such systems are safety critical and failures can be catastrophic. How to guarantee that these systems are designed and built correctly? Traditional approaches based on testing need to be supplemented with approaches based on formal methods. Unfortunately, formal verification is an intractable problem in general and, hence, no single formal verification approach can uniformly perform well. This project develops a new approach for formal verification that complements existing approaches. Having a suite of formal verification tools can help find errors earlier in the design cycle to reduce overall development cost and increase assurance of designed complex cyber-physical systems. &lt;br/&gt;&lt;br/&gt;This project contributes to the existing formal verification technology by developing a new approach for formal verification, called bounded verification. Bounded verification verifies a system by performing a bounded search for a witness that would establish the property. Depending on the property, a witness is a Lyapunov function, an inductive invariant, a controlled invariant and so on. Search for a witness is cast as satisfiability of a quantified (\exists\forall) formula. Satisfiability is decided using a combination of techniques including counterexample guided inductive reasoning, compositional reasoning, simulations, and fixpoint computations. Witnesses generated by bounded verification of the design are used to bootstrap formal verification of the implementation. This project also extends the bounded verification approach to performing automated synthesis of systems. Bounded verification explicitly provides witnesses for correctness, which can be used to aid in the certification process. This project also introduces new links for interaction between the fields of theorem proving and formal verification that aim to foster collaboration and promote progress in both areas.</AbstractNarration>
    <MinAmdLetterDate>07/30/2010</MinAmdLetterDate>
    <MaxAmdLetterDate>09/14/2010</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1017483</AwardID>
    <Investigator>
      <FirstName>Ashish</FirstName>
      <LastName>Tiwari</LastName>
      <EmailAddress>tiwari@csl.sri.com</EmailAddress>
      <StartDate>07/30/2010</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>SRI International</Name>
      <CityName>Menlo Park</CityName>
      <ZipCode>940253493</ZipCode>
      <PhoneNumber>6508592651</PhoneNumber>
      <StreetAddress>333 RAVENSWOOD AVE</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>California</StateName>
      <StateCode>CA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>9150</Code>
      <Text>EXP PROG TO STIM COMP RES</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9218</Code>
      <Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>HPCC</Code>
      <Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
    </ProgramReference>
  </Award>
</rootTag>
