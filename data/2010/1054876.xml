<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CAREER: Integrating Automated Software Testing Methods</AwardTitle>
    <AwardEffectiveDate>09/01/2011</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2016</AwardExpirationDate>
    <AwardAmount>400000</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Testing is one of the most frequently performed and important activities in the work life of all programmers. Unfortunately, for critical and frequently re-used code, manual testing often requires great effort for mediocre results. This project focuses on automatically generating tests for modules with an interface that alters system state, e.g. critical modules such as file systems and data structures that are used in many safety- or economically- critical software systems.&lt;br/&gt;&lt;br/&gt;This project improves the state-of-the-art through a novel integration of proven methods, combined with fundamental improvements to underlying testing approaches. The most efficient test methods (in terms of program paths explored per second) are used to generate very large numbers of unique paths to expose faults, while the most effective method (in terms of exploring hard-to-reach paths that reveal very difficult-to-find faults) are used to complete testing in a two-stage approach. The central idea is to resort to expensive test generation methods only when it is unlikely that cost-effective methods will succeed.&lt;br/&gt;&lt;br/&gt;This project improves software testing education by curriculum and textbook development aimed at introducing undergraduate students to principled testing, a far-too-common omission in current CS education.&lt;br/&gt;&lt;br/&gt;Spacecraft flight software, including file systems and data structures used in flight systems, provides early applications for this approach. Inadequate testing methods cost tens of billions of dollars each year, despite high test budgets. More effective testing will provide economic benefit and contribute (e.g., through spacecraft software or other scientific applications) to basic scientific research and exploration in other fields.</AbstractNarration>
    <MinAmdLetterDate>01/11/2011</MinAmdLetterDate>
    <MaxAmdLetterDate>09/15/2014</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1054876</AwardID>
    <Investigator>
      <FirstName>Alex</FirstName>
      <LastName>Groce</LastName>
      <EmailAddress>agroce@gmail.com</EmailAddress>
      <StartDate>01/11/2011</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Oregon State University</Name>
      <CityName>Corvallis</CityName>
      <ZipCode>973318507</ZipCode>
      <PhoneNumber>5417374933</PhoneNumber>
      <StreetAddress>OREGON STATE UNIVERSITY</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Oregon</StateName>
      <StateCode>OR</StateCode>
    </Institution>
    <ProgramElement>
      <Code>1640</Code>
      <Text>INFORMATION TECHNOLOGY RESEARC</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>1045</Code>
      <Text>CAREER: FACULTY EARLY CAR DEV</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>8206</Code>
      <Text>Formal Methods and Verification</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>1187</Code>
      <Text>PECASE- eligible</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>7798</Code>
      <Text>SOFTWARE &amp; HARDWARE FOUNDATION</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>HPCC</Code>
      <Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
    </ProgramReference>
  </Award>
</rootTag>
