<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>SHF: Small: Collaborative Research: Modular ACL2</AwardTitle>
    <AwardEffectiveDate>08/15/2010</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2014</AwardExpirationDate>
    <AwardAmount>299386</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Nina Amla</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Reliability is extremely important for some software and hardware&lt;br/&gt;applications. One approach is to use a programming language with a&lt;br/&gt;mechanized logic---a so-called theorem-prover---to prove theorems that&lt;br/&gt;establish some critical behavioral characteristics. Among theorem-provers,&lt;br/&gt;ACL2 has found use with several industrial suppliers of high assurance&lt;br/&gt;software and hardware. ACL2 does not support component-oriented software&lt;br/&gt;development, however, making it difficult to use with large and complex&lt;br/&gt;projects.&lt;br/&gt;&lt;br/&gt;This research project has three goals: to add a pragmatic module system to&lt;br/&gt;ACL2; to equip it with a hygienic macro system; and to investigate a type&lt;br/&gt;system that accommodates ACL2's programming idioms. The project team&lt;br/&gt;employs a cyclic, three-step exploration method. The first step is to&lt;br/&gt;adapt constructs from existing, similar languages to ACL2, especially a&lt;br/&gt;logical meaning consistent with the theorem prover of ACL2. The second&lt;br/&gt;step is to explore the pragmatics of the design with a wide range of&lt;br/&gt;examples. The third step is to add implementations to a pedagogic,&lt;br/&gt;interactive development environment for ACL2 and to evaluate their&lt;br/&gt;usefulness in software engineering courses. The results of this last step&lt;br/&gt;are used to re-start the cycle.&lt;br/&gt;&lt;br/&gt;The work will contribute to the dissemination of theorem provers in&lt;br/&gt;classrooms and industry. The research team expects to expose college&lt;br/&gt;students to the use of theorem proving in the design and development of&lt;br/&gt;complex systems with dozens, and possibly hundreds, of reliable&lt;br/&gt;components. The team also hopes to improve the ability of industrial ACL2&lt;br/&gt;programmers to tackle complex component-oriented systems.</AbstractNarration>
    <MinAmdLetterDate>08/05/2010</MinAmdLetterDate>
    <MaxAmdLetterDate>08/05/2010</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>1016418</AwardID>
    <Investigator>
      <FirstName>Matthias</FirstName>
      <LastName>Felleisen</LastName>
      <EmailAddress>matthias@ccs.neu.edu</EmailAddress>
      <StartDate>08/05/2010</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Northeastern University</Name>
      <CityName>BOSTON</CityName>
      <ZipCode>021155005</ZipCode>
      <PhoneNumber>6173732508</PhoneNumber>
      <StreetAddress>360 HUNTINGTON AVE</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Massachusetts</StateName>
      <StateCode>MA</StateCode>
    </Institution>
    <ProgramElement>
      <Code>7944</Code>
      <Text>SOFTWARE ENG &amp; FORMAL METHODS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>9218</Code>
      <Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>HPCC</Code>
      <Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
    </ProgramReference>
  </Award>
</rootTag>
